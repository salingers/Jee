package tw.codedata;

import org.springframework.jdbc.core.support.JdbcDaoSupport;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.jdbc.core.JdbcTemplate;
import javax.sql.DataSource;
import java.sql.*;
import java.util.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class DvdDaoJdbcImpl extends JdbcDaoSupport implements DvdDao {

    @Autowired
    public DvdDaoJdbcImpl(DataSource dataSource) {
        setDataSource(dataSource);
    }

    public DvdDaoJdbcImpl createTables() {
        JdbcTemplate jdbcTemplate = getJdbcTemplate();

        jdbcTemplate.execute("DROP TABLE dvds if exists");
        jdbcTemplate.execute("DROP TABLE directors if exists");

        jdbcTemplate.execute(
                "CREATE TABLE directors ("
                + "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1),"
                + "name VARCHAR(255),"
                + "PRIMARY KEY(id))"
        );
        jdbcTemplate.execute(
                "CREATE TABLE dvds ("
                + "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1),"
                + "title VARCHAR(255),"
                + "year INTEGER NOT NULL,"
                + "duration INTEGER NOT NULL, "
                + "director_id INTEGER NOT NULL, "
                + "FOREIGN KEY (director_id) REFERENCES directors(id))"
        );

        return this;
    }

    public void saveDvd(Dvd dvd) {
        Integer directorId = getDirectorId(dvd.getDirector());
        getJdbcTemplate().update(
                "INSERT INTO dvds "
                + "(title, year, duration, director_id) "
                + "VALUES (?, ?, ?, ?)",
                dvd.getTitle(), dvd.getYear(), dvd.getDuration(), directorId);
    }

    public List<Dvd> allDvds() {
        return getJdbcTemplate().query(
                "SELECT dvds.title, dvds.year, dvds.duration, "
                + "directors.name FROM dvds, directors "
                + "WHERE dvds.director_id = directors.id"
                + " ORDER BY dvds.title",
                new RowMapper<Dvd>() {
                    @Override
                    public Dvd mapRow(ResultSet rs, int rowNum) throws SQLException {
                        return new Dvd(
                                rs.getString("title"),
                                rs.getInt("year"),
                                rs.getInt("duration"),
                                rs.getString("name")
                        );
                    }
                });
    }

    private Integer getDirectorId(String director) {
        if (hasNoDirector(director)) {
            saveDirector(director);
        }
        List ids = getJdbcTemplate().queryForList(
                "SELECT id FROM directors WHERE name=?", director);
        Map row = (Map) ids.get(0);
        return (Integer) row.get("id");
    }

    private boolean hasNoDirector(String director) {
        return getJdbcTemplate().queryForObject(
                "SELECT COUNT(*) FROM directors WHERE name=?", new Object[] {director}, Integer.class) == 0;
    }

    private void saveDirector(String director) {
        getJdbcTemplate().update(
                "INSERT INTO directors(name) values(?)", director);
    }
}
